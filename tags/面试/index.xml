<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>面试 on Notes</title>
    <link>http://landodo.github.io/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Landon</copyright>
    <lastBuildDate>Wed, 20 Apr 2022 17:22:19 +0800</lastBuildDate><atom:link href="http://landodo.github.io/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实现C&#43;&#43;类的基本函数：3构造、2赋值、1析构、运算符重载</title>
      <link>http://landodo.github.io/posts/20220420-cpp-implement-string-class/</link>
      <pubDate>Wed, 20 Apr 2022 17:22:19 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20220420-cpp-implement-string-class/</guid>
      <description>字节二面面试题：使用实现一个基础的 string 类。要求类中成员函数包含： 默认构造函数 拷贝构造函数 移动构造函数 —————— 拷贝赋值运算 移动赋值运算 ———</description>
    </item>
    
    <item>
      <title>十大经典的排序算法</title>
      <link>http://landodo.github.io/posts/20201230-ten-classic-sorting-algorithms/</link>
      <pubDate>Wed, 30 Dec 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201230-ten-classic-sorting-algorithms/</guid>
      <description>十大经典的排序算法 #ifndef SORT_ALGO_H #define SORT_ALGO_H #include &amp;lt;vector&amp;gt; using std::vector; using std::swap; // 1. Bubble Sort // Time complexity: O(n^2) // Space complexity: O(1) void bubble_sort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { bool sorted = false; for (int i = 0; i &amp;lt; nums.size() &amp;amp;&amp;amp; !sorted; ++i) { sorted = true; for (int j = 1; j &amp;lt; nums.size() - i; ++j) { if (nums[j] &amp;lt; nums[j</description>
    </item>
    
    <item>
      <title>计算机网络基础（3）</title>
      <link>http://landodo.github.io/posts/20201225-computer-network-review/</link>
      <pubDate>Fri, 25 Dec 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201225-computer-network-review/</guid>
      <description>计算机网络复习 OSI (Open Systems Interconnection) 参考模型和 TCP/IP 模型 TCP/IP 四层模型的代表协议： 网络接口层（Link Layer）：ARP 协议（IP addr &amp;mdash;ARP&amp;mdash;&amp;gt;MAC addr） IP 网络层（Int</description>
    </item>
    
    <item>
      <title>计算机网络基础（2）</title>
      <link>http://landodo.github.io/posts/20201218-computer-network/</link>
      <pubDate>Fri, 18 Dec 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201218-computer-network/</guid>
      <description>计算机网络基础 第一讲主要介绍了计算机网络的体系结构、性能、安全以及挑战和机遇。并且还讲了中科院在网络方面的相关工作。 互联网不仅仅改变生活与社</description>
    </item>
    
    <item>
      <title>最短路径问题 Shortest Path</title>
      <link>http://landodo.github.io/posts/20201214-shortest-path/</link>
      <pubDate>Mon, 14 Dec 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201214-shortest-path/</guid>
      <description>最短路径问题 Shortest Path 广度优先遍历 最短路径树 Shorted Path Tree 单源最短路径 Single Shorted Path Tree。 无权图的最短路径和带权图的最短路径不同，带权图需要考虑松弛操作（Re</description>
    </item>
    
    <item>
      <title>使用 C 语言实现一个 HTTP 服务器（2）</title>
      <link>http://landodo.github.io/posts/20201113-http/</link>
      <pubDate>Fri, 13 Nov 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201113-http/</guid>
      <description>HTTP 服务器的一些截图记录 HTML 页面 服务器的 HTML 页面有两个分别是 index.html 和 README.html。这个 css 风格是我最喜欢的，因此也就应用在了这个小项目上。 README.html 是</description>
    </item>
    
    <item>
      <title>使用 C 语言实现一个 HTTP 服务器（1）</title>
      <link>http://landodo.github.io/posts/20201107-http-server-1/</link>
      <pubDate>Sat, 07 Nov 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201107-http-server-1/</guid>
      <description>HTTP Server⟹HTTPS Server: 实验要求 这是网络课的一个小作业，具体要求如下： 使用 C 语言实现一个 HTTP 服务器 支持 HTTP Post/Get 方法，可以上传或下载文件 支持 HTTP 分</description>
    </item>
    
    <item>
      <title>Prim 算法&amp;Kruskal 算法求最小生成树</title>
      <link>http://landodo.github.io/posts/20201106-prim-kruskal/</link>
      <pubDate>Fri, 06 Nov 2020 10:17:29 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20201106-prim-kruskal/</guid>
      <description>Prim 算法&amp;amp;Kruskal 算法求最小生成树 最小生成树 概述：在一给定的无向图 G=(V,E) 中，(u,v) 代表连接顶点 u 与顶点 v 的边，而 w(u,v) 代表此边的权值</description>
    </item>
    
    <item>
      <title>面试题系列（01）</title>
      <link>http://landodo.github.io/posts/20200524-interview-question-series-01/</link>
      <pubDate>Sun, 24 May 2020 11:50:09 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20200524-interview-question-series-01/</guid>
      <description>面经 这是面试题笔记系列的第一篇文章，记录一些常见的面试题。其中主要是一些一线互联网大厂的面试题，我主要收集于 LeetCode、CSDN、知乎</description>
    </item>
    
    <item>
      <title>十大排序算法</title>
      <link>http://landodo.github.io/posts/20191231-10-sort-algo/</link>
      <pubDate>Tue, 31 Dec 2019 11:50:09 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20191231-10-sort-algo/</guid>
      <description>十大排序算法 #面经 #算法与数据结构 冒泡排序（Bubble Sort） 选择排序（Selection Sort） 插入排序（Insertion Sort</description>
    </item>
    
    <item>
      <title>计数排序（Counting Sort）</title>
      <link>http://landodo.github.io/posts/20191230-counting-sort/</link>
      <pubDate>Mon, 30 Dec 2019 11:50:09 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20191230-counting-sort/</guid>
      <description>计数排序（Counting Sort） #面经 #算法与数据结构 计数排序是一种通过对每个数组中的每个元素进行相应的计数统计，通过计数值确定元素的正</description>
    </item>
    
    <item>
      <title>《STL 源码剖析》STL 学习笔记</title>
      <link>http://landodo.github.io/posts/20190304-stl-notes/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:19 +0800</pubDate>
      
      <guid>http://landodo.github.io/posts/20190304-stl-notes/</guid>
      <description>这是我学习 STL 的笔记。 更新日志 2019-03-04 新增了[STL 概述与版本简介](#STL 概述与版本简介)、空间分配器（allocators）、迭代器（iter</description>
    </item>
    
  </channel>
</rss>
